# network imports
import socket
import platform
import psutil
# protocol imports
import json
from datetime import datetime

# utils
from utils import convert_size

# socket imports
from network import write



# constant variables
HOST = 'localhost'
PORT = 3232



# get host data extracts the client data and generates a json object.
def get_host_data():
    # creating a data dictionary
    data = {}

    # system information
    uname = platform.uname()
    data["System"] = {}
    data["System"]["System"] = uname.system
    data["System"]["Host Name"] = uname.node
    data["System"]["Release"] = uname.release
    data["System"]["Version"] = uname.version
    data["System"]["Machine"] = uname.machine
    data["System"]["Processor"] = uname.processor

    # boot Time
    boot_time_timestamp = psutil.boot_time()
    bt = datetime.fromtimestamp(boot_time_timestamp)
    data["System"]["Boot Time"] = "{}/{}/{} {}:{}:{}".format(
        bt.year, bt.month, bt.day, bt.hour, bt.minute, bt.second)

    # CPU information
    data["CPU"] = {}
    data["CPU"]["Physical cores"] = psutil.cpu_count(logical=False)
    data["CPU"]["Total cores"] = psutil.cpu_count(logical=True)

    # memory information
    svmem = psutil.virtual_memory()
    data["Memory"] = {}
    data["Memory"]["Total"] = convert_size(svmem.total)
    data["Memory"]["Available"] = convert_size(svmem.available)
    data["Memory"]["Used"] = convert_size(svmem.used)
    data["Memory"]["Percentage"] = f"{svmem.percent}%"

    # swap memory information
    swap = psutil.swap_memory()
    data["Swap"] = {}
    data["Swap"]["Total"] = convert_size(swap.total)
    data["Swap"]["Free"] = convert_size(swap.free)
    data["Swap"]["Used"] = convert_size(swap.used)
    data["Swap"]["Percentage"] = f"{swap.percent}%"

    # network information
    data["Network"] = {}
    if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in if_addrs.items():
        for address in interface_addresses:
            if str(address.family) == 'AddressFamily.AF_INET':
                data["Network"][interface_name] = {}
                data["Network"][interface_name]["IP"] = address.address
                data["Network"][interface_name]["Netmask"] = address.netmask
                data["Network"][interface_name]["Broadcast IP"] = address.broadcast

    return json.dumps(data)



# start client
if __name__ == '__main__':
    # creating a new socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # connect to server
    sock.connect((HOST, PORT))

    print(f"connected to {HOST} on port {PORT}")

    # send host data to server
    write(sock, get_host_data().encode('utf-8'))

    sock.close()